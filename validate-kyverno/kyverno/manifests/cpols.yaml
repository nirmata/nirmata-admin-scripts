apiVersion: v1
items:
- apiVersion: kyverno.io/v1
  kind: ClusterPolicy
  metadata:
    annotations:
      kyverno.io/kubernetes-version: 1.22-1.23
      kyverno.io/kyverno-version: 1.6.0
      policies.kyverno.io/category: Pod Security Standards (Baseline)
      policies.kyverno.io/description: Adding capabilities beyond those listed in
        the policy must be disallowed.
      policies.kyverno.io/minversion: 1.6.0
      policies.kyverno.io/severity: medium
      policies.kyverno.io/subject: Pod
      policies.kyverno.io/title: Disallow Capabilities
    creationTimestamp: "2023-05-31T21:15:35Z"
    generation: 1
    name: disallow-capabilities
    resourceVersion: "450599954"
    uid: cc9176c4-d6bf-4078-a6ad-fe7229366afa
  spec:
    background: true
    rules:
    - match:
        any:
        - resources:
            kinds:
            - Pod
      name: adding-capabilities
      validate:
        deny:
          conditions:
            all:
            - key: '{{ request.object.spec.[ephemeralContainers, initContainers, containers][].securityContext.capabilities.add[]
                }}'
              operator: AnyNotIn
              value:
              - AUDIT_WRITE
              - CHOWN
              - DAC_OVERRIDE
              - FOWNER
              - FSETID
              - KILL
              - MKNOD
              - NET_BIND_SERVICE
              - SETFCAP
              - SETGID
              - SETPCAP
              - SETUID
              - SYS_CHROOT
        message: Any capabilities added beyond the allowed list (AUDIT_WRITE, CHOWN,
          DAC_OVERRIDE, FOWNER, FSETID, KILL, MKNOD, NET_BIND_SERVICE, SETFCAP, SETGID,
          SETPCAP, SETUID, SYS_CHROOT) are disallowed.
    validationFailureAction: audit
  status:
    autogen:
      rules:
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - DaemonSet
              - Deployment
              - Job
              - StatefulSet
              - ReplicaSet
              - ReplicationController
          resources: {}
        mutate: {}
        name: autogen-adding-capabilities
        validate:
          deny:
            conditions:
              all:
              - key: '{{ request.object.spec.template.spec.[ephemeralContainers, initContainers,
                  containers][].securityContext.capabilities.add[] }}'
                operator: AnyNotIn
                value:
                - AUDIT_WRITE
                - CHOWN
                - DAC_OVERRIDE
                - FOWNER
                - FSETID
                - KILL
                - MKNOD
                - NET_BIND_SERVICE
                - SETFCAP
                - SETGID
                - SETPCAP
                - SETUID
                - SYS_CHROOT
          message: Any capabilities added beyond the allowed list (AUDIT_WRITE, CHOWN,
            DAC_OVERRIDE, FOWNER, FSETID, KILL, MKNOD, NET_BIND_SERVICE, SETFCAP,
            SETGID, SETPCAP, SETUID, SYS_CHROOT) are disallowed.
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - CronJob
          resources: {}
        mutate: {}
        name: autogen-cronjob-adding-capabilities
        validate:
          deny:
            conditions:
              all:
              - key: '{{ request.object.spec.jobTemplate.spec.template.spec.[ephemeralContainers,
                  initContainers, containers][].securityContext.capabilities.add[]
                  }}'
                operator: AnyNotIn
                value:
                - AUDIT_WRITE
                - CHOWN
                - DAC_OVERRIDE
                - FOWNER
                - FSETID
                - KILL
                - MKNOD
                - NET_BIND_SERVICE
                - SETFCAP
                - SETGID
                - SETPCAP
                - SETUID
                - SYS_CHROOT
          message: Any capabilities added beyond the allowed list (AUDIT_WRITE, CHOWN,
            DAC_OVERRIDE, FOWNER, FSETID, KILL, MKNOD, NET_BIND_SERVICE, SETFCAP,
            SETGID, SETPCAP, SETUID, SYS_CHROOT) are disallowed.
    conditions:
    - lastTransitionTime: "2023-05-31T21:15:36Z"
      message: ""
      reason: Succeeded
      status: "True"
      type: Ready
    ready: true
    rulecount:
      generate: 0
      mutate: 0
      validate: 1
      verifyimages: 0
- apiVersion: kyverno.io/v1
  kind: ClusterPolicy
  metadata:
    annotations:
      kyverno.io/kubernetes-version: 1.22-1.23
      kyverno.io/kyverno-version: 1.6.0
      policies.kyverno.io/category: Pod Security Standards (Baseline)
      policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
        Communication namespace, and network namespace) allow access to shared information
        and can be used to elevate privileges. Pods should not be allowed access to
        host namespaces. This policy ensures fields which make use of these host namespaces
        are unset or set to `false`.
      policies.kyverno.io/severity: medium
      policies.kyverno.io/subject: Pod
      policies.kyverno.io/title: Disallow Host Namespaces
    creationTimestamp: "2023-05-31T21:14:47Z"
    generation: 1
    name: disallow-host-namespaces
    resourceVersion: "450599139"
    uid: 8b98f7c8-6efa-4843-9f1a-725fc87815bd
  spec:
    background: true
    rules:
    - match:
        any:
        - resources:
            kinds:
            - Pod
      name: host-namespaces
      validate:
        message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
          spec.hostIPC, and spec.hostPID must be unset or set to `false`.
        pattern:
          spec:
            =(hostIPC): "false"
            =(hostNetwork): "false"
            =(hostPID): "false"
    validationFailureAction: audit
  status:
    autogen:
      rules:
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - DaemonSet
              - Deployment
              - Job
              - StatefulSet
              - ReplicaSet
              - ReplicationController
          resources: {}
        mutate: {}
        name: autogen-host-namespaces
        validate:
          message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
            spec.hostIPC, and spec.hostPID must be unset or set to `false`.
          pattern:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - CronJob
          resources: {}
        mutate: {}
        name: autogen-cronjob-host-namespaces
        validate:
          message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
            spec.hostIPC, and spec.hostPID must be unset or set to `false`.
          pattern:
            spec:
              jobTemplate:
                spec:
                  template:
                    spec:
                      =(hostIPC): "false"
                      =(hostNetwork): "false"
                      =(hostPID): "false"
    conditions:
    - lastTransitionTime: "2023-05-31T21:14:48Z"
      message: ""
      reason: Succeeded
      status: "True"
      type: Ready
    ready: true
    rulecount:
      generate: 0
      mutate: 0
      validate: 1
      verifyimages: 0
- apiVersion: kyverno.io/v1
  kind: ClusterPolicy
  metadata:
    annotations:
      kyverno.io/kubernetes-version: 1.22-1.23
      kyverno.io/kyverno-version: 1.6.0
      policies.kyverno.io/category: Pod Security Standards (Baseline)
      policies.kyverno.io/description: HostPath volumes let Pods use host directories
        and volumes in containers. Using host resources can be used to access shared
        data or escalate privileges and should not be allowed. This policy ensures
        no hostPath volumes are in use.
      policies.kyverno.io/severity: medium
      policies.kyverno.io/subject: Pod,Volume
      policies.kyverno.io/title: Disallow hostPath
    creationTimestamp: "2023-05-31T21:15:07Z"
    generation: 1
    name: disallow-host-path
    resourceVersion: "450599447"
    uid: a0583ab0-d24e-44c5-be39-04ffa0d978d2
  spec:
    background: true
    rules:
    - match:
        any:
        - resources:
            kinds:
            - Pod
      name: host-path
      validate:
        message: HostPath volumes are forbidden. The field spec.volumes[*].hostPath
          must be unset.
        pattern:
          spec:
            =(volumes):
            - X(hostPath): "null"
    validationFailureAction: audit
  status:
    autogen:
      rules:
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - DaemonSet
              - Deployment
              - Job
              - StatefulSet
              - ReplicaSet
              - ReplicationController
          resources: {}
        mutate: {}
        name: autogen-host-path
        validate:
          message: HostPath volumes are forbidden. The field spec.volumes[*].hostPath
            must be unset.
          pattern:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - CronJob
          resources: {}
        mutate: {}
        name: autogen-cronjob-host-path
        validate:
          message: HostPath volumes are forbidden. The field spec.volumes[*].hostPath
            must be unset.
          pattern:
            spec:
              jobTemplate:
                spec:
                  template:
                    spec:
                      =(volumes):
                      - X(hostPath): "null"
    conditions:
    - lastTransitionTime: "2023-05-31T21:15:08Z"
      message: ""
      reason: Succeeded
      status: "True"
      type: Ready
    ready: true
    rulecount:
      generate: 0
      mutate: 0
      validate: 1
      verifyimages: 0
- apiVersion: kyverno.io/v1
  kind: ClusterPolicy
  metadata:
    annotations:
      kyverno.io/kubernetes-version: 1.22-1.23
      kyverno.io/kyverno-version: 1.6.0
      policies.kyverno.io/category: Pod Security Standards (Baseline)
      policies.kyverno.io/description: 'Access to host ports allows potential snooping
        of network traffic and should not be allowed, or at minimum restricted to
        a known list. This policy ensures the `hostPort` field is unset or set to
        `0`. '
      policies.kyverno.io/severity: medium
      policies.kyverno.io/subject: Pod
      policies.kyverno.io/title: Disallow hostPorts
    creationTimestamp: "2023-05-31T21:14:58Z"
    generation: 1
    name: disallow-host-ports
    resourceVersion: "450599338"
    uid: 0277a560-206f-49cb-8282-051e89f5359e
  spec:
    background: true
    rules:
    - match:
        any:
        - resources:
            kinds:
            - Pod
      name: host-ports-none
      validate:
        message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
          , spec.initContainers[*].ports[*].hostPort, and spec.ephemeralContainers[*].ports[*].hostPort
          must either be unset or set to `0`.
        pattern:
          spec:
            =(ephemeralContainers):
            - =(ports):
              - =(hostPort): 0
            =(initContainers):
            - =(ports):
              - =(hostPort): 0
            containers:
            - =(ports):
              - =(hostPort): 0
    validationFailureAction: audit
  status:
    autogen:
      rules:
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - DaemonSet
              - Deployment
              - Job
              - StatefulSet
              - ReplicaSet
              - ReplicationController
          resources: {}
        mutate: {}
        name: autogen-host-ports-none
        validate:
          message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
            , spec.initContainers[*].ports[*].hostPort, and spec.ephemeralContainers[*].ports[*].hostPort
            must either be unset or set to `0`.
          pattern:
            spec:
              template:
                spec:
                  =(ephemeralContainers):
                  - =(ports):
                    - =(hostPort): 0
                  =(initContainers):
                  - =(ports):
                    - =(hostPort): 0
                  containers:
                  - =(ports):
                    - =(hostPort): 0
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - CronJob
          resources: {}
        mutate: {}
        name: autogen-cronjob-host-ports-none
        validate:
          message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
            , spec.initContainers[*].ports[*].hostPort, and spec.ephemeralContainers[*].ports[*].hostPort
            must either be unset or set to `0`.
          pattern:
            spec:
              jobTemplate:
                spec:
                  template:
                    spec:
                      =(ephemeralContainers):
                      - =(ports):
                        - =(hostPort): 0
                      =(initContainers):
                      - =(ports):
                        - =(hostPort): 0
                      containers:
                      - =(ports):
                        - =(hostPort): 0
    conditions:
    - lastTransitionTime: "2023-05-31T21:14:59Z"
      message: ""
      reason: Succeeded
      status: "True"
      type: Ready
    ready: true
    rulecount:
      generate: 0
      mutate: 0
      validate: 1
      verifyimages: 0
- apiVersion: kyverno.io/v1
  kind: ClusterPolicy
  metadata:
    annotations:
      kyverno.io/kubernetes-version: 1.22-1.23
      kyverno.io/kyverno-version: 1.6.0
      policies.kyverno.io/category: Pod Security Standards (Baseline)
      policies.kyverno.io/description: 'Access to host ports allows potential snooping
        of network traffic and should not be allowed, or at minimum restricted to
        a known list. This policy ensures the `hostPort` field is set to one in the
        designated list. '
      policies.kyverno.io/minversion: 1.6.0
      policies.kyverno.io/severity: medium
      policies.kyverno.io/subject: Pod
      policies.kyverno.io/title: Disallow hostPorts Range (Alternate)
    creationTimestamp: "2023-05-31T21:15:33Z"
    generation: 1
    name: disallow-host-ports-range
    resourceVersion: "450599924"
    uid: bcfdc811-93a8-48a8-99c4-adae45ab6226
  spec:
    background: true
    rules:
    - match:
        any:
        - resources:
            kinds:
            - Pod
      name: host-port-range
      validate:
        deny:
          conditions:
            all:
            - key: '{{ request.object.spec.[ephemeralContainers, initContainers, containers][].ports[].hostPort
                }}'
              operator: AnyNotIn
              value: 5000-6000
        message: The only permitted hostPorts are in the range 5000-6000.
    validationFailureAction: audit
  status:
    autogen:
      rules:
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - DaemonSet
              - Deployment
              - Job
              - StatefulSet
              - ReplicaSet
              - ReplicationController
          resources: {}
        mutate: {}
        name: autogen-host-port-range
        validate:
          deny:
            conditions:
              all:
              - key: '{{ request.object.spec.template.spec.[ephemeralContainers, initContainers,
                  containers][].ports[].hostPort }}'
                operator: AnyNotIn
                value: 5000-6000
          message: The only permitted hostPorts are in the range 5000-6000.
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - CronJob
          resources: {}
        mutate: {}
        name: autogen-cronjob-host-port-range
        validate:
          deny:
            conditions:
              all:
              - key: '{{ request.object.spec.jobTemplate.spec.template.spec.[ephemeralContainers,
                  initContainers, containers][].ports[].hostPort }}'
                operator: AnyNotIn
                value: 5000-6000
          message: The only permitted hostPorts are in the range 5000-6000.
    conditions:
    - lastTransitionTime: "2023-05-31T21:15:34Z"
      message: ""
      reason: Succeeded
      status: "True"
      type: Ready
    ready: true
    rulecount:
      generate: 0
      mutate: 0
      validate: 1
      verifyimages: 0
- apiVersion: kyverno.io/v1
  kind: ClusterPolicy
  metadata:
    annotations:
      kyverno.io/kubernetes-version: 1.22-1.23
      kyverno.io/kyverno-version: 1.6.0
      policies.kyverno.io/category: Pod Security Standards (Baseline)
      policies.kyverno.io/description: Windows pods offer the ability to run HostProcess
        containers which enables privileged access to the Windows node. Privileged
        access to the host is disallowed in the baseline policy. HostProcess pods
        are an alpha feature as of Kubernetes v1.22. This policy ensures the `hostProcess`
        field, if present, is set to `false`.
      policies.kyverno.io/severity: medium
      policies.kyverno.io/subject: Pod
      policies.kyverno.io/title: Disallow hostProcess
    creationTimestamp: "2023-05-31T21:14:44Z"
    generation: 1
    name: disallow-host-process
    resourceVersion: "450599112"
    uid: 5bf87bac-d743-4062-854e-469132b34dcd
  spec:
    background: true
    rules:
    - match:
        any:
        - resources:
            kinds:
            - Pod
      name: host-process-containers
      validate:
        message: HostProcess containers are disallowed. The fields spec.securityContext.windowsOptions.hostProcess,
          spec.containers[*].securityContext.windowsOptions.hostProcess, spec.initContainers[*].securityContext.windowsOptions.hostProcess,
          and spec.ephemeralContainers[*].securityContext.windowsOptions.hostProcess
          must either be undefined or set to `false`.
        pattern:
          spec:
            =(ephemeralContainers):
            - =(securityContext):
                =(windowsOptions):
                  =(hostProcess): "false"
            =(initContainers):
            - =(securityContext):
                =(windowsOptions):
                  =(hostProcess): "false"
            containers:
            - =(securityContext):
                =(windowsOptions):
                  =(hostProcess): "false"
    validationFailureAction: audit
  status:
    autogen:
      rules:
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - DaemonSet
              - Deployment
              - Job
              - StatefulSet
              - ReplicaSet
              - ReplicationController
          resources: {}
        mutate: {}
        name: autogen-host-process-containers
        validate:
          message: HostProcess containers are disallowed. The fields spec.securityContext.windowsOptions.hostProcess,
            spec.containers[*].securityContext.windowsOptions.hostProcess, spec.initContainers[*].securityContext.windowsOptions.hostProcess,
            and spec.ephemeralContainers[*].securityContext.windowsOptions.hostProcess
            must either be undefined or set to `false`.
          pattern:
            spec:
              template:
                spec:
                  =(ephemeralContainers):
                  - =(securityContext):
                      =(windowsOptions):
                        =(hostProcess): "false"
                  =(initContainers):
                  - =(securityContext):
                      =(windowsOptions):
                        =(hostProcess): "false"
                  containers:
                  - =(securityContext):
                      =(windowsOptions):
                        =(hostProcess): "false"
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - CronJob
          resources: {}
        mutate: {}
        name: autogen-cronjob-host-process-containers
        validate:
          message: HostProcess containers are disallowed. The fields spec.securityContext.windowsOptions.hostProcess,
            spec.containers[*].securityContext.windowsOptions.hostProcess, spec.initContainers[*].securityContext.windowsOptions.hostProcess,
            and spec.ephemeralContainers[*].securityContext.windowsOptions.hostProcess
            must either be undefined or set to `false`.
          pattern:
            spec:
              jobTemplate:
                spec:
                  template:
                    spec:
                      =(ephemeralContainers):
                      - =(securityContext):
                          =(windowsOptions):
                            =(hostProcess): "false"
                      =(initContainers):
                      - =(securityContext):
                          =(windowsOptions):
                            =(hostProcess): "false"
                      containers:
                      - =(securityContext):
                          =(windowsOptions):
                            =(hostProcess): "false"
    conditions:
    - lastTransitionTime: "2023-05-31T21:14:45Z"
      message: ""
      reason: Succeeded
      status: "True"
      type: Ready
    ready: true
    rulecount:
      generate: 0
      mutate: 0
      validate: 1
      verifyimages: 0
- apiVersion: kyverno.io/v1
  kind: ClusterPolicy
  metadata:
    annotations:
      kyverno.io/kubernetes-version: 1.22-1.23
      kyverno.io/kyverno-version: 1.6.0
      policies.kyverno.io/category: Pod Security Standards (Baseline)
      policies.kyverno.io/description: Privileged mode disables most security mechanisms
        and must not be allowed. This policy ensures Pods do not call for privileged
        mode.
      policies.kyverno.io/severity: medium
      policies.kyverno.io/subject: Pod
      policies.kyverno.io/title: Disallow Privileged Containers
    creationTimestamp: "2023-05-31T21:15:20Z"
    generation: 1
    name: disallow-privileged-containers
    resourceVersion: "450599655"
    uid: 399dd4e1-8afd-4ba9-868f-f8f13bd000f5
  spec:
    background: true
    rules:
    - match:
        any:
        - resources:
            kinds:
            - Pod
      name: privileged-containers
      validate:
        message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
          and spec.initContainers[*].securityContext.privileged must be unset or set
          to `false`.
        pattern:
          spec:
            =(ephemeralContainers):
            - =(securityContext):
                =(privileged): "false"
            =(initContainers):
            - =(securityContext):
                =(privileged): "false"
            containers:
            - =(securityContext):
                =(privileged): "false"
    validationFailureAction: audit
  status:
    autogen:
      rules:
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - DaemonSet
              - Deployment
              - Job
              - StatefulSet
              - ReplicaSet
              - ReplicationController
          resources: {}
        mutate: {}
        name: autogen-privileged-containers
        validate:
          message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
            and spec.initContainers[*].securityContext.privileged must be unset or
            set to `false`.
          pattern:
            spec:
              template:
                spec:
                  =(ephemeralContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - CronJob
          resources: {}
        mutate: {}
        name: autogen-cronjob-privileged-containers
        validate:
          message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
            and spec.initContainers[*].securityContext.privileged must be unset or
            set to `false`.
          pattern:
            spec:
              jobTemplate:
                spec:
                  template:
                    spec:
                      =(ephemeralContainers):
                      - =(securityContext):
                          =(privileged): "false"
                      =(initContainers):
                      - =(securityContext):
                          =(privileged): "false"
                      containers:
                      - =(securityContext):
                          =(privileged): "false"
    conditions:
    - lastTransitionTime: "2023-05-31T21:15:21Z"
      message: ""
      reason: Succeeded
      status: "True"
      type: Ready
    ready: true
    rulecount:
      generate: 0
      mutate: 0
      validate: 1
      verifyimages: 0
- apiVersion: kyverno.io/v1
  kind: ClusterPolicy
  metadata:
    annotations:
      kyverno.io/kubernetes-version: 1.22-1.23
      kyverno.io/kyverno-version: 1.6.0
      policies.kyverno.io/category: Pod Security Standards (Baseline)
      policies.kyverno.io/description: The default /proc masks are set up to reduce
        attack surface and should be required. This policy ensures nothing but the
        default procMount can be specified. Note that in order for users to deviate
        from the `Default` procMount requires setting a feature gate at the API server.
      policies.kyverno.io/severity: medium
      policies.kyverno.io/subject: Pod
      policies.kyverno.io/title: Disallow procMount
    creationTimestamp: "2023-05-31T21:14:28Z"
    generation: 1
    name: disallow-proc-mount
    resourceVersion: "450598927"
    uid: 959efaed-2028-4085-8629-0a39f25ee6d4
  spec:
    background: true
    rules:
    - match:
        any:
        - resources:
            kinds:
            - Pod
      name: check-proc-mount
      validate:
        message: Changing the proc mount from the default is not allowed. The fields
          spec.containers[*].securityContext.procMount, spec.initContainers[*].securityContext.procMount,
          and spec.ephemeralContainers[*].securityContext.procMount must be unset
          or set to `Default`.
        pattern:
          spec:
            =(ephemeralContainers):
            - =(securityContext):
                =(procMount): Default
            =(initContainers):
            - =(securityContext):
                =(procMount): Default
            containers:
            - =(securityContext):
                =(procMount): Default
    validationFailureAction: audit
  status:
    autogen:
      rules:
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - DaemonSet
              - Deployment
              - Job
              - StatefulSet
              - ReplicaSet
              - ReplicationController
          resources: {}
        mutate: {}
        name: autogen-check-proc-mount
        validate:
          message: Changing the proc mount from the default is not allowed. The fields
            spec.containers[*].securityContext.procMount, spec.initContainers[*].securityContext.procMount,
            and spec.ephemeralContainers[*].securityContext.procMount must be unset
            or set to `Default`.
          pattern:
            spec:
              template:
                spec:
                  =(ephemeralContainers):
                  - =(securityContext):
                      =(procMount): Default
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - CronJob
          resources: {}
        mutate: {}
        name: autogen-cronjob-check-proc-mount
        validate:
          message: Changing the proc mount from the default is not allowed. The fields
            spec.containers[*].securityContext.procMount, spec.initContainers[*].securityContext.procMount,
            and spec.ephemeralContainers[*].securityContext.procMount must be unset
            or set to `Default`.
          pattern:
            spec:
              jobTemplate:
                spec:
                  template:
                    spec:
                      =(ephemeralContainers):
                      - =(securityContext):
                          =(procMount): Default
                      =(initContainers):
                      - =(securityContext):
                          =(procMount): Default
                      containers:
                      - =(securityContext):
                          =(procMount): Default
    conditions:
    - lastTransitionTime: "2023-05-31T21:14:29Z"
      message: ""
      reason: Succeeded
      status: "True"
      type: Ready
    ready: true
    rulecount:
      generate: 0
      mutate: 0
      validate: 1
      verifyimages: 0
- apiVersion: kyverno.io/v1
  kind: ClusterPolicy
  metadata:
    annotations:
      kyverno.io/kubernetes-version: 1.22-1.23
      kyverno.io/kyverno-version: 1.6.0
      policies.kyverno.io/category: Pod Security Standards (Baseline)
      policies.kyverno.io/description: SELinux options can be used to escalate privileges
        and should not be allowed. This policy ensures that the `seLinuxOptions` field
        is undefined.
      policies.kyverno.io/severity: medium
      policies.kyverno.io/subject: Pod
      policies.kyverno.io/title: Disallow SELinux
    creationTimestamp: "2023-05-31T21:14:33Z"
    generation: 1
    name: disallow-selinux
    resourceVersion: "450598989"
    uid: 0d317c50-d35e-43fd-aea5-70743939aa42
  spec:
    background: true
    rules:
    - match:
        any:
        - resources:
            kinds:
            - Pod
      name: selinux-type
      validate:
        message: Setting the SELinux type is restricted. The fields spec.securityContext.seLinuxOptions.type,
          spec.containers[*].securityContext.seLinuxOptions.type, , spec.initContainers[*].securityContext.seLinuxOptions,
          and spec.ephemeralContainers[*].securityContext.seLinuxOptions.type must
          either be unset or set to one of the allowed values (container_t, container_init_t,
          or container_kvm_t).
        pattern:
          spec:
            =(ephemeralContainers):
            - =(securityContext):
                =(seLinuxOptions):
                  =(type): container_t | container_init_t | container_kvm_t
            =(initContainers):
            - =(securityContext):
                =(seLinuxOptions):
                  =(type): container_t | container_init_t | container_kvm_t
            =(securityContext):
              =(seLinuxOptions):
                =(type): container_t | container_init_t | container_kvm_t
            containers:
            - =(securityContext):
                =(seLinuxOptions):
                  =(type): container_t | container_init_t | container_kvm_t
    - match:
        any:
        - resources:
            kinds:
            - Pod
      name: selinux-user-role
      validate:
        message: Setting the SELinux user or role is forbidden. The fields spec.securityContext.seLinuxOptions.user,
          spec.securityContext.seLinuxOptions.role, spec.containers[*].securityContext.seLinuxOptions.user,
          spec.containers[*].securityContext.seLinuxOptions.role, spec.initContainers[*].securityContext.seLinuxOptions.user,
          spec.initContainers[*].securityContext.seLinuxOptions.role, spec.ephemeralContainers[*].securityContext.seLinuxOptions.user,
          and spec.ephemeralContainers[*].securityContext.seLinuxOptions.role must
          be unset.
        pattern:
          spec:
            =(ephemeralContainers):
            - =(securityContext):
                =(seLinuxOptions):
                  X(role): "null"
                  X(user): "null"
            =(initContainers):
            - =(securityContext):
                =(seLinuxOptions):
                  X(role): "null"
                  X(user): "null"
            =(securityContext):
              =(seLinuxOptions):
                X(role): "null"
                X(user): "null"
            containers:
            - =(securityContext):
                =(seLinuxOptions):
                  X(role): "null"
                  X(user): "null"
    validationFailureAction: audit
  status:
    autogen:
      rules:
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - DaemonSet
              - Deployment
              - Job
              - StatefulSet
              - ReplicaSet
              - ReplicationController
          resources: {}
        mutate: {}
        name: autogen-selinux-type
        validate:
          message: Setting the SELinux type is restricted. The fields spec.securityContext.seLinuxOptions.type,
            spec.containers[*].securityContext.seLinuxOptions.type, , spec.initContainers[*].securityContext.seLinuxOptions,
            and spec.ephemeralContainers[*].securityContext.seLinuxOptions.type must
            either be unset or set to one of the allowed values (container_t, container_init_t,
            or container_kvm_t).
          pattern:
            spec:
              template:
                spec:
                  =(ephemeralContainers):
                  - =(securityContext):
                      =(seLinuxOptions):
                        =(type): container_t | container_init_t | container_kvm_t
                  =(initContainers):
                  - =(securityContext):
                      =(seLinuxOptions):
                        =(type): container_t | container_init_t | container_kvm_t
                  =(securityContext):
                    =(seLinuxOptions):
                      =(type): container_t | container_init_t | container_kvm_t
                  containers:
                  - =(securityContext):
                      =(seLinuxOptions):
                        =(type): container_t | container_init_t | container_kvm_t
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - CronJob
          resources: {}
        mutate: {}
        name: autogen-cronjob-selinux-type
        validate:
          message: Setting the SELinux type is restricted. The fields spec.securityContext.seLinuxOptions.type,
            spec.containers[*].securityContext.seLinuxOptions.type, , spec.initContainers[*].securityContext.seLinuxOptions,
            and spec.ephemeralContainers[*].securityContext.seLinuxOptions.type must
            either be unset or set to one of the allowed values (container_t, container_init_t,
            or container_kvm_t).
          pattern:
            spec:
              jobTemplate:
                spec:
                  template:
                    spec:
                      =(ephemeralContainers):
                      - =(securityContext):
                          =(seLinuxOptions):
                            =(type): container_t | container_init_t | container_kvm_t
                      =(initContainers):
                      - =(securityContext):
                          =(seLinuxOptions):
                            =(type): container_t | container_init_t | container_kvm_t
                      =(securityContext):
                        =(seLinuxOptions):
                          =(type): container_t | container_init_t | container_kvm_t
                      containers:
                      - =(securityContext):
                          =(seLinuxOptions):
                            =(type): container_t | container_init_t | container_kvm_t
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - DaemonSet
              - Deployment
              - Job
              - StatefulSet
              - ReplicaSet
              - ReplicationController
          resources: {}
        mutate: {}
        name: autogen-selinux-user-role
        validate:
          message: Setting the SELinux user or role is forbidden. The fields spec.securityContext.seLinuxOptions.user,
            spec.securityContext.seLinuxOptions.role, spec.containers[*].securityContext.seLinuxOptions.user,
            spec.containers[*].securityContext.seLinuxOptions.role, spec.initContainers[*].securityContext.seLinuxOptions.user,
            spec.initContainers[*].securityContext.seLinuxOptions.role, spec.ephemeralContainers[*].securityContext.seLinuxOptions.user,
            and spec.ephemeralContainers[*].securityContext.seLinuxOptions.role must
            be unset.
          pattern:
            spec:
              template:
                spec:
                  =(ephemeralContainers):
                  - =(securityContext):
                      =(seLinuxOptions):
                        X(role): "null"
                        X(user): "null"
                  =(initContainers):
                  - =(securityContext):
                      =(seLinuxOptions):
                        X(role): "null"
                        X(user): "null"
                  =(securityContext):
                    =(seLinuxOptions):
                      X(role): "null"
                      X(user): "null"
                  containers:
                  - =(securityContext):
                      =(seLinuxOptions):
                        X(role): "null"
                        X(user): "null"
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - CronJob
          resources: {}
        mutate: {}
        name: autogen-cronjob-selinux-user-role
        validate:
          message: Setting the SELinux user or role is forbidden. The fields spec.securityContext.seLinuxOptions.user,
            spec.securityContext.seLinuxOptions.role, spec.containers[*].securityContext.seLinuxOptions.user,
            spec.containers[*].securityContext.seLinuxOptions.role, spec.initContainers[*].securityContext.seLinuxOptions.user,
            spec.initContainers[*].securityContext.seLinuxOptions.role, spec.ephemeralContainers[*].securityContext.seLinuxOptions.user,
            and spec.ephemeralContainers[*].securityContext.seLinuxOptions.role must
            be unset.
          pattern:
            spec:
              jobTemplate:
                spec:
                  template:
                    spec:
                      =(ephemeralContainers):
                      - =(securityContext):
                          =(seLinuxOptions):
                            X(role): "null"
                            X(user): "null"
                      =(initContainers):
                      - =(securityContext):
                          =(seLinuxOptions):
                            X(role): "null"
                            X(user): "null"
                      =(securityContext):
                        =(seLinuxOptions):
                          X(role): "null"
                          X(user): "null"
                      containers:
                      - =(securityContext):
                          =(seLinuxOptions):
                            X(role): "null"
                            X(user): "null"
    conditions:
    - lastTransitionTime: "2023-05-31T21:14:34Z"
      message: ""
      reason: Succeeded
      status: "True"
      type: Ready
    ready: true
    rulecount:
      generate: 0
      mutate: 0
      validate: 2
      verifyimages: 0
- apiVersion: kyverno.io/v1
  kind: ClusterPolicy
  metadata:
    annotations:
      kyverno.io/kubernetes-version: 1.22-1.23
      kyverno.io/kyverno-version: 1.6.0
      policies.kyverno.io/category: Pod Security Standards (Baseline)
      policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
        profile is applied by default. The default policy should prevent overriding
        or disabling the policy, or restrict overrides to an allowed set of profiles.
        This policy ensures Pods do not specify any other AppArmor profiles than `runtime/default`
        or `localhost/*`.
      policies.kyverno.io/minversion: 1.3.0
      policies.kyverno.io/severity: medium
      policies.kyverno.io/subject: Pod, Annotation
      policies.kyverno.io/title: Restrict AppArmor
    creationTimestamp: "2023-05-31T21:15:14Z"
    generation: 1
    name: restrict-apparmor-profiles
    resourceVersion: "450599549"
    uid: 39c159e8-1037-4f0e-b1f7-1b290e78ee80
  spec:
    background: true
    rules:
    - match:
        any:
        - resources:
            kinds:
            - Pod
      name: app-armor
      validate:
        message: Specifying other AppArmor profiles is disallowed. The annotation
          `container.apparmor.security.beta.kubernetes.io` if defined must not be
          set to anything other than `runtime/default` or `localhost/*`.
        pattern:
          =(metadata):
            =(annotations):
              =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
                | localhost/*
    validationFailureAction: audit
  status:
    autogen:
      rules:
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - DaemonSet
              - Deployment
              - Job
              - StatefulSet
              - ReplicaSet
              - ReplicationController
          resources: {}
        mutate: {}
        name: autogen-app-armor
        validate:
          message: Specifying other AppArmor profiles is disallowed. The annotation
            `container.apparmor.security.beta.kubernetes.io` if defined must not be
            set to anything other than `runtime/default` or `localhost/*`.
          pattern:
            spec:
              template:
                =(metadata):
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
                      | localhost/*
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - CronJob
          resources: {}
        mutate: {}
        name: autogen-cronjob-app-armor
        validate:
          message: Specifying other AppArmor profiles is disallowed. The annotation
            `container.apparmor.security.beta.kubernetes.io` if defined must not be
            set to anything other than `runtime/default` or `localhost/*`.
          pattern:
            spec:
              jobTemplate:
                spec:
                  template:
                    =(metadata):
                      =(annotations):
                        =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
                          | localhost/*
    conditions:
    - lastTransitionTime: "2023-05-31T21:15:14Z"
      message: ""
      reason: Succeeded
      status: "True"
      type: Ready
    ready: true
    rulecount:
      generate: 0
      mutate: 0
      validate: 1
      verifyimages: 0
- apiVersion: kyverno.io/v1
  kind: ClusterPolicy
  metadata:
    annotations:
      kyverno.io/kubernetes-version: 1.22-1.23
      kyverno.io/kyverno-version: 1.6.0
      policies.kyverno.io/category: Pod Security Standards (Baseline)
      policies.kyverno.io/description: The seccomp profile must not be explicitly
        set to Unconfined. This policy,  requiring Kubernetes v1.19 or later, ensures
        that seccomp is unset or  set to `RuntimeDefault` or `Localhost`.
      policies.kyverno.io/severity: medium
      policies.kyverno.io/subject: Pod
      policies.kyverno.io/title: Restrict Seccomp
    creationTimestamp: "2023-05-31T21:14:50Z"
    generation: 1
    name: restrict-seccomp
    resourceVersion: "450599197"
    uid: 34345446-a84c-4c3b-9399-f9c77b709d8f
  spec:
    background: true
    rules:
    - match:
        any:
        - resources:
            kinds:
            - Pod
      name: check-seccomp
      validate:
        message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
          spec.containers[*].securityContext.seccompProfile.type, spec.initContainers[*].securityContext.seccompProfile.type,
          and spec.ephemeralContainers[*].securityContext.seccompProfile.type must
          be unset or set to `RuntimeDefault` or `Localhost`.
        pattern:
          spec:
            =(ephemeralContainers):
            - =(securityContext):
                =(seccompProfile):
                  =(type): RuntimeDefault | Localhost
            =(initContainers):
            - =(securityContext):
                =(seccompProfile):
                  =(type): RuntimeDefault | Localhost
            =(securityContext):
              =(seccompProfile):
                =(type): RuntimeDefault | Localhost
            containers:
            - =(securityContext):
                =(seccompProfile):
                  =(type): RuntimeDefault | Localhost
    validationFailureAction: audit
  status:
    autogen:
      rules:
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - DaemonSet
              - Deployment
              - Job
              - StatefulSet
              - ReplicaSet
              - ReplicationController
          resources: {}
        mutate: {}
        name: autogen-check-seccomp
        validate:
          message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
            spec.containers[*].securityContext.seccompProfile.type, spec.initContainers[*].securityContext.seccompProfile.type,
            and spec.ephemeralContainers[*].securityContext.seccompProfile.type must
            be unset or set to `RuntimeDefault` or `Localhost`.
          pattern:
            spec:
              template:
                spec:
                  =(ephemeralContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): RuntimeDefault | Localhost
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): RuntimeDefault | Localhost
                  =(securityContext):
                    =(seccompProfile):
                      =(type): RuntimeDefault | Localhost
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): RuntimeDefault | Localhost
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - CronJob
          resources: {}
        mutate: {}
        name: autogen-cronjob-check-seccomp
        validate:
          message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
            spec.containers[*].securityContext.seccompProfile.type, spec.initContainers[*].securityContext.seccompProfile.type,
            and spec.ephemeralContainers[*].securityContext.seccompProfile.type must
            be unset or set to `RuntimeDefault` or `Localhost`.
          pattern:
            spec:
              jobTemplate:
                spec:
                  template:
                    spec:
                      =(ephemeralContainers):
                      - =(securityContext):
                          =(seccompProfile):
                            =(type): RuntimeDefault | Localhost
                      =(initContainers):
                      - =(securityContext):
                          =(seccompProfile):
                            =(type): RuntimeDefault | Localhost
                      =(securityContext):
                        =(seccompProfile):
                          =(type): RuntimeDefault | Localhost
                      containers:
                      - =(securityContext):
                          =(seccompProfile):
                            =(type): RuntimeDefault | Localhost
    conditions:
    - lastTransitionTime: "2023-05-31T21:14:51Z"
      message: ""
      reason: Succeeded
      status: "True"
      type: Ready
    ready: true
    rulecount:
      generate: 0
      mutate: 0
      validate: 1
      verifyimages: 0
- apiVersion: kyverno.io/v1
  kind: ClusterPolicy
  metadata:
    annotations:
      kyverno.io/kubernetes-version: 1.22-1.23
      kyverno.io/kyverno-version: 1.6.0
      policies.kyverno.io/category: Pod Security Standards (Baseline)
      policies.kyverno.io/description: Sysctls can disable security mechanisms or
        affect all containers on a host, and should be disallowed except for an allowed
        "safe" subset. A sysctl is considered safe if it is namespaced in the container
        or the Pod, and it is isolated from other Pods or processes on the same Node.
        This policy ensures that only those "safe" subsets can be specified in a Pod.
      policies.kyverno.io/severity: medium
      policies.kyverno.io/subject: Pod
      policies.kyverno.io/title: Restrict sysctls
    creationTimestamp: "2023-05-31T21:15:24Z"
    generation: 1
    name: restrict-sysctls
    resourceVersion: "450599771"
    uid: 2318a736-5743-4ea1-9263-eccf892d00b9
  spec:
    background: true
    rules:
    - match:
        any:
        - resources:
            kinds:
            - Pod
      name: check-sysctls
      validate:
        message: Setting additional sysctls above the allowed type is disallowed.
          The field spec.securityContext.sysctls must be unset or not use any other
          names than kernel.shm_rmid_forced, net.ipv4.ip_local_port_range, net.ipv4.ip_unprivileged_port_start,
          net.ipv4.tcp_syncookies and net.ipv4.ping_group_range.
        pattern:
          spec:
            =(securityContext):
              =(sysctls):
              - =(name): kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.ip_unprivileged_port_start
                  | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
    validationFailureAction: audit
  status:
    autogen:
      rules:
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - DaemonSet
              - Deployment
              - Job
              - StatefulSet
              - ReplicaSet
              - ReplicationController
          resources: {}
        mutate: {}
        name: autogen-check-sysctls
        validate:
          message: Setting additional sysctls above the allowed type is disallowed.
            The field spec.securityContext.sysctls must be unset or not use any other
            names than kernel.shm_rmid_forced, net.ipv4.ip_local_port_range, net.ipv4.ip_unprivileged_port_start,
            net.ipv4.tcp_syncookies and net.ipv4.ping_group_range.
          pattern:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - =(name): kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.ip_unprivileged_port_start | net.ipv4.tcp_syncookies
                        | net.ipv4.ping_group_range
      - exclude:
          resources: {}
        generate:
          clone: {}
          cloneList: {}
        match:
          any:
          - resources:
              kinds:
              - CronJob
          resources: {}
        mutate: {}
        name: autogen-cronjob-check-sysctls
        validate:
          message: Setting additional sysctls above the allowed type is disallowed.
            The field spec.securityContext.sysctls must be unset or not use any other
            names than kernel.shm_rmid_forced, net.ipv4.ip_local_port_range, net.ipv4.ip_unprivileged_port_start,
            net.ipv4.tcp_syncookies and net.ipv4.ping_group_range.
          pattern:
            spec:
              jobTemplate:
                spec:
                  template:
                    spec:
                      =(securityContext):
                        =(sysctls):
                        - =(name): kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                            | net.ipv4.ip_unprivileged_port_start | net.ipv4.tcp_syncookies
                            | net.ipv4.ping_group_range
    conditions:
    - lastTransitionTime: "2023-05-31T21:15:25Z"
      message: ""
      reason: Succeeded
      status: "True"
      type: Ready
    ready: true
    rulecount:
      generate: 0
      mutate: 0
      validate: 1
      verifyimages: 0
kind: List
metadata:
  resourceVersion: ""
